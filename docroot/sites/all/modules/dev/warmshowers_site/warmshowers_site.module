<?php
/**
 * @file
 * Site helpers for warmshowers.org
 *
 */


/**
 * Implements hook_menu().
 *
 * @return array
 */
function warmshowers_site_menu() {
  // This page is simply to let an auth user view what the unauth user will see.
  $items['frontpage'] = array(
    'title' => 'Warm Showers',
    'page callback' => 'warmshowers_site_front_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['mandrill_incoming_status'] = array(
    'page callback' => 'warmshowers_site_mandrill_incoming_status_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Provide access to unanswered messages
  $items['messages/unanswered'] = array(
    'title' => 'Unanswered Requests',
    'page callback' => 'warmshowers_site_unanswered_messages',
    'access callback' => 'privatemsg_user_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  $items['user/%user/messages/unanswered'] = array(
    'title' => 'Unanswered Requests',
    'page callback' => 'warmshowers_site_unanswered_messages',
    'page arguments' => array(1),
    'access callback' => 'privatemsg_user_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );


  return $items;
}

/**
 * Implements hook_theme().
 * Define theme elements for WarmShowers.org
 *
 * @return array
 */
function warmshowers_site_theme() {
  $template_path = drupal_get_path('module', 'warmshowers_site') . '/templates';
  $variables = array();

  return array(
    'ws_user_account_menu' => array(
      'path' => $template_path,
      'variables' => array('account' => NULL, 'fullname' => NULL, 'profile_link' => NULL, 'logout_link' => NULL),
      'template' => 'ws-user-account-menu-block',
    ),
    'ws_anonymous_user_menu' => array(
      'path' => $template_path,
      'variables' => array('account' => NULL, 'signup_link' => NULL, 'login_link' => NULL),
      'template' => 'ws-anonymous-user-menu-block',
    ),
    'ws_anonymous_welcome_block' => array(
      'path' => $template_path,
      'variables' => array('account' => NULL),
      'template' => 'ws-anonymous-welcome-block',
    ),
    'ws_member_stats_block' => array(
      'path' => $template_path,
      'variables' => array('account' => NULL, 'user_count' => NULL, 'hose_count' => NULL),
      'template' => 'ws-member-stats-block',
    ),
  );
}

/**
 * Implements hook_preprocess().
 *
 * Provides data to theme functions.
 *
 * @param $variables
 * @return mixed
 */
function warmshowers_site_preprocess(&$variables, $key) {
  if ($GLOBALS['user']->uid) {
    $variables['account'] = user_load($GLOBALS['user']->uid);
  }

  _warmshowers_site_get_theme_variables($key, $variables);
}

/**
 * Helper function to set default variables for theme functions.
 *
 * @param string $delta
 *  The delta name for the theme function being called.
 * @param array $variables
 *  An array of variables to be modified or appended to.
 *
 * @return array
 */
function _warmshowers_site_get_theme_variables($delta, &$variables) {

  switch ($delta) {
    case 'ws_user_account_menu':
      if ($variables['account'] && !empty($variables['account']->uid)) {
        $account = $variables['account'];
        $variables['fullname'] = $account->fullname;
        $variables['profile_link'] = !empty($account->fullname) ? l($account->fullname, 'user/' . $account->uid) : '';
        if (module_exists('privatemsg') && function_exists('privatemsg_title_callback')) {
          $variables['message_link'] = l(privatemsg_title_callback(), 'user/' . $account->uid . '/messages');
        }
        $variables['logout_link'] = l(t('Log out'), 'user/logout');
      }
      break;
    case 'ws_anonymous_user_menu':
      if (empty($variables['account']) || empty($variables['account']->uid)) {
        $variables['signup_link'] = l(t('Sign up'), 'user/register', array(
          'attributes' => array(
            'class' => array('signup')
          )
        ));
        $variables['login_link'] = l(t('Log in'), 'user', array(
          'attributes' => array(
            'class' => array('login')
          )
        ));
      }
      break;
    case 'ws_member_stats_block':
      /**
       * Select all users.
       */
      $qry = db_query("SELECT COUNT(u.uid) AS numusers FROM users AS u
              WHERE u.uid > 1 AND u.status > 0");
      $record = $qry->fetchAssoc();
      $variables['user_count'] = number_format($record['numusers']);

      /**
       * Select all users that are able to host.
       */
      $qry = db_query("SELECT COUNT(u.uid) AS numusers FROM users AS u
              LEFT JOIN wsuser AS w
                ON w.uid = u.uid
              WHERE u.uid > 1 AND u.status > 0
                AND w.notcurrentlyavailable > 0");
      $record = $qry->fetchAssoc();
      $variables['host_count'] = number_format($record['numusers']);
      break;
  }
  return $variables;
}

/**
 * Implements hook_block_info().
 * Define general purpose blocks for WarmShowers.org.
 *
 * @return array
 */
function warmshowers_site_block_info() {
  $blocks = array();

  $blocks['ws_user_account_menu'] = array(
    'info' => t('User account menu'),
    'status' => FALSE,
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );
  $blocks['ws_anonymous_user_menu'] = array(
    'info' => t('Links for anonymous users'),
    'status' => FALSE,
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );
  $blocks['ws_anonymous_welcome_message'] = array(
    'info' => t('Anonymous user welcome message'),
    'status' => FALSE,
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );
  $blocks['ws_member_stats_block'] = array(
    'info' => t('Member stats'),
    'status' => FALSE,
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @return array
 */
function warmshowers_site_block_view($delta) {
  global $user;
  $block = array();

  switch ($delta) {
    case 'ws_user_account_menu':
      $block['subject'] = '';

      $block['content'] = !empty($user->uid) ? theme('ws_user_account_menu') : '';
      break;
    case 'ws_anonymous_user_menu':
      $block['subject'] = '';

      $block['content'] = empty($user->uid) ? theme('ws_anonymous_user_menu') : '';
      break;
    case 'ws_anonymous_welcome_message':
      $block['subject'] = '';

      $block['content'] = theme('ws_anonymous_welcome_block');
      break;
    case 'ws_member_stats_block':
      $block['subject'] = '';

      $block['content'] = theme('ws_member_stats_block');
      break;
  }
  return $block;
}

/**
 * Return empty content for our front page so it doesn't have to render real content.
 *
 * @return string
 */
function warmshowers_site_front_page() {
  return '';
}


// Alter contact form mail with useful info for admin
/**
 * Implements hook_mail_alter to change contact form
 */
function warmshowers_site_mail_alter(&$message) {
  switch ($message['id']) {

    case 'contact_page_mail':
      $account = NULL;
      if ($GLOBALS['user']->uid != 0) {
        $account = user_load($GLOBALS['user']->uid);
      }
      else {
        $account = array_shift(user_load_multiple(array(), array('mail' => $message['params']['mail'])));
      }
      if (!empty($account)) {
        $created = format_date($account->created, 'long', '', 'MDT');
        $languages = language_list();
        $domain = $languages[$account->language]->domain;
        $validate_link = "{$domain}/toboggan/revalidate/{$account->uid}";
        $mandrill_link = "https://mandrillapp.com/activity/?q=" . urlencode($account->mail);
        if (empty($account->roles[2])) {
          $status = "NOT Validated (<a href='{$validate_link}'>Resend validation link</a>";
        }
        else {
          $status = "Validated";
        }
        $suffix = <<<EOT
---<br/>
From: <a href="https://www.warmshowers.org/user/{$account->uid}">{$account->fullname}</a> ({$account->name})
Status when email sent: {$status}
Edit: https://www.warmshowers.org/user/{$account->uid}/edit
Mandrill Link: {$mandrill_link}
Account created: $created
<b><a href="https://www.warmshowers.org/user/{$account->uid}/admin_details">Current status link</a></b>
EOT;
      }
      else {
        $suffix = "<br/>---<br/>From unregistered user";
      }

      if (is_array($message['body'])) {
        $message['body'][] = $suffix;
      }
      else {
        $message['body'] .= $suffix;
      }
      return;

    case 'uc_order_action-mail':
      if (!empty($message['params']['template']) && $message['params']['template'] == 'admin') {
        $message['headers']['Reply-To'] = '<' . $message['params']['replacements']['uc_order']->primary_email . '>';
      }
      return;
  }
}


/**
 * Alter user profile form.
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_user_profile_form_alter(&$form, &$form_state) {
  // On submit of user form, go to view instead of staying on edit.
  if (empty($form['submit']['#submit'])) {
    // First make sure we have all the submit handlers from the form
    $form['submit']['#submit'] = $form['#submit'];
    // And now add our own, which only does the $form_state['redirect']
    $form['submit']['#submit'][] = 'warmshowers_site_user_profile_form_submit';
  }

  // Hide the comment_notify user-page settings, and make the default be
  // always send updates.
  $form['comment_notify_settings']['#access'] = FALSE;
  $form['comment_notify_settings']['node_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['node_notify_mailalert']['#value'] = TRUE;

  $form['comment_notify_settings']['comment_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['comment_notify_mailalert']['#value'] = TRUE;

  // Hide the option to turn off or otherwise configure privatemsg.
  $form['privatemsg']['#access'] = FALSE;
  // Hide the option to configure htmlmail
  $form['htmlmail']['#access'] = FALSE;

}

/**
 * Submit handler for form alter of user profile form.
 *
 * After saving, go to the user profile page which was being edited.
 */
function warmshowers_site_user_profile_form_submit($form, &$form_state) {
  $account = array_shift(user_load_multiple(array(), array('name' => $form_state['values']['name'])));
  if ($account) {
    $form_state['redirect'] = 'user/' . $account->uid;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function warmshowers_site_form_user_register_form_alter(&$form, &$form_state) {
  // We choose to hide the "remember me" checkbox on registration
  // if persistent login won't do it for us per our submitted patch:
  // https://www.drupal.org/node/765116
  if (isset($form['account']) && is_array($form['account'])) {
    $form['account']['persistent_login']['#type'] = 'hidden';
  }
  else {
    $form['persistent_login']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Prevent users from changing the to:, as we want them to access this using
 * the button, and want them to access no more than one member.
 *
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_privatemsg_new_alter(&$form, &$form_state) {
  $form['recipient']['#type'] = 'hidden';
  $target_username = preg_replace('/ \[user\]$/', '', @$form['recipient']['#default_value']);

  $recipients_title = t("(No recipient specified)");

  if (!empty($target_username) && ($accounts = user_load_multiple(array(), array('name' => $target_username)))) {
    $account = array_shift($accounts);
    $recipients_title = theme('username', array(
      'account' => $account,
      'name' => $account->name
    ));
    $form['description'] = array(
      '#type' => 'item',
      '#title' => t('Write new message to !recipient', array('!recipient' => $recipients_title)),
      '#weight' => -99,
    );
  }
}

function warmshowers_site_form_alter(&$form, &$form_state, $form_id) {
  // We want to change the label of the 'Add to cart' button. In some cases depending on the product.
  if (isset($form['nid']['#value']) && $form_id == 'uc_product_add_to_cart_form_' . $form['nid']['#value']) {
    $cart_button_label = isset($form['node']['#value']->field_cart_button_label) ? field_get_items('node', $form['node']['#value'], 'field_cart_button_label') : NULL;
    if (isset($cart_button_label[0]['value'])) {
      $cart_button_label = current($cart_button_label);
      $form['actions']['submit']['#value'] = check_plain($cart_button_label['value']);
    }
    $form['actions']['submit']['#attributes']['class'] = array('node-add-to-cart');
  }
};

/**
 * Implements hook_form_FORMID_alter()
 *
 * Change user cancel markup for normal user
 *
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_user_cancel_confirm_form_alter(&$form, &$form_state) {
  // Prepending help text to the user cancel form.
  if (!user_access('administer users')) {
    $form['description']['#markup'] = "If you would rather stay but not host members, you can just edit your account and click the <strong>'Not currently available'</strong> checkbox and you won't show up in any map or geographical searches.<br><br>" . $form['description']['#markup'];
  }
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Default the notification settings
 *
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_comment_form_alter(&$form, &$form_state) {

  $form['notify_settings']['notify']['#default_value'] = TRUE;
  $form['notify_settings']['notify_type']['#default_value'] = 2;
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Privileged users must be able to save with html. Who?
 * This is a questionable removal as it could allow translators to
 * insert even PHP or javascript which would be destructive.

 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_locale_translate_edit_form_alter(&$form, &$form_state) {
  unset($form['#validate']);
  $form['#validate'] = array('warmshowers_site_translate_edit_form_validate');
}

/**
 * Implements hook_user_cancel_methods_alter().
 * Modify the account cancellation methods in relation to the messages displayed
 * and create a new method for handling spam user accounts.
 */
function warmshowers_site_user_cancel_methods_alter(&$methods) {
  // Remove the unrequired user cancellation methods
  unset($methods['user_cancel_block']);
  unset($methods['user_cancel_block_unpublish']);
  unset($methods['user_cancel_delete']);

  // Modify the descriptions for the default user cancellation method.
  $methods['user_cancel_reassign'] = array(
    'title' => t('DEFAULT: Delete the account and make its content (including feedback) belong to the %anonymous-name user.', array('%anonymous-name' => variable_get('anonymous', t('Anonymous')))),
    'description' => t('Your account will be removed and all account information deleted. All of your feedback and other postings will remain.'),
  );
  // Add a new method to block the user but remove all content.
  $methods['user_cancel_block_delete'] = array(
    'title' => t('SPAMMER: Disable the account and delete its content (including feedback).'),
    'description' => t('Your account will be blocked and you will no longer be able to log in. All of your feedback will be permanently deleted.'),
  );
}

/**
 * Implements hook_user_cancel().
 */
function warmshowers_site_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_block_delete':
      // Invoking all user_delete hooks to remove any entities created by this user
      // without removing the actual user.
      module_invoke_all('user_delete', $account);
      break;
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add a #after_build to change the presentation so they can't change the target user
 */
function warmshowers_site_form_trust_referral_node_form_alter(&$form, &$form_state) {

  // Prevent altering the member and clean up presentation of it.
  $form['#after_build'][] = '_warmshowers_site_alter_feedback_member';
  if (!user_access('administer users')) {
    $form['field_member_i_trust']['und'][0]['#prefix'] = '<div style="display:none">';
    $form['field_member_i_trust']['und'][0]['#suffix'] = '</div>';
  }

}

/**
 * Add specific instructions of username; this can be done only after
 * the prepopulate module has done its alteration so we know the member.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _warmshowers_site_alter_feedback_member($form, &$form_state) {
  $username = $form['field_member_i_trust']['und'][0]['uid']['#value'];
  if (!empty($username)) {
    $accounts = user_load_multiple(array(), array('name' => $username));
    $account = array_shift($accounts);
  }
  if (!empty($account)) {
    $form['field_rating']['und']['#title'] = t('Overall experience with %fullname', array('%fullname' => $account->fullname));
  }
  return $form;
}

/**
 * This is added here to allow unvalidated saves for translators for just some
 * lids, which can be added to the variable if needed.
 *
 * @param $form
 * @param $form_state
 */
function warmshowers_site_translate_edit_form_validate($form, &$form_state) {
  // By default, only allow the PM notification email
  $items_allowed = variable_get('warmshowers_site_allowed_skip_html', array(58861));

  if (in_array($form['lid']['#value'], $items_allowed)) {
    return;
  }

  // Continues on with copied locale_translate_edit_form_validate()

  // Locale string check is needed for default textgroup only.
  $safe_check_needed = $form_state['values']['textgroup'] == 'default';
  foreach ($form_state['values']['translations'] as $key => $value) {
    if ($safe_check_needed && !locale_string_is_safe($value)) {
      form_set_error('translations', t('The submitted string contains disallowed HTML: %string', array('%string' => $value)));
      watchdog('locale', 'Attempted submission of a translation string with disallowed HTML: %string', array('%string' => $value), WATCHDOG_WARNING);
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Change the permissions for tracker display.
 */
function warmshowers_site_menu_alter(&$items) {
  // Change some items on user menu to no longer be MENU_LOCAL_TASK
  $removals = array(
    'user/%user/track',
    'user/%user/contact',
    'user/%user/location',
    'user/%/scheduler',
    'user/%user/orders',
    'user/%user/recurring-fees'
  );
  foreach ($removals as $path) {
    if (!empty($items[$path])) {
      $items[$path]['type'] = MENU_NORMAL_ITEM;
    }
  }
  $items['user/%user/view']['title'] = 'Profile';

  // We don't want the node river of news page out there.
  unset($items['node']);

  // Disallow use of contact form for member contact
  unset($items['user/%user/contact']);

  // Remove the "write new message" pm submenu
  $url_prefix = variable_get('privatemsg_url_prefix', 'messages');
  $items[$url_prefix . '/new']['type'] = MENU_CALLBACK;
}


/**
 * Implements hook_services_resources_alter().
 *
 * We provide our own login service so that we can allow either username or
 * email address for the username.
 *
 * @param $resources
 * @param $endpoint
 */
function warmshowers_site_services_resources_alter(&$resources, $endpoint) {
  $resources['user']['actions']['login'] = array(
    'help' => 'Login a user for a new session - allows email address as username',
    'callback' => 'warmshowers_site_user_resource_login',
    'file' => array(
      'type' => 'module',
      'module' => 'warmshowers_site',
    ),
    'args' => array(
      array(
        'name' => 'username',
        'type' => 'string',
        'description' => 'A valid username or associated email address',
        'source' => array('data' => 'username'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'password',
        'type' => 'string',
        'description' => 'A valid password',
        'source' => array('data' => 'password'),
        'optional' => FALSE,
      ),
    ),
    'access callback' => 'services_access_menu',
  );

}


/**
 * Login a user using the specified credentials.
 *
 * Copied from user_resource.inc: _user_resource_login(), but with addition
 * of allowing the email address as username.
 *
 * Note this will transfer a plaintext password.
 *
 * @param $username
 *   Username to be logged in.
 * @param $password
 *   Password, must be plain text and not hashed.
 *
 * @return
 *   A valid session object.
 */

function warmshowers_site_user_resource_login($username, $password) {
  global $user;

  if ($user->uid) {
    // user is already logged in
    return services_error(t('Already logged in as @user.', array('@user' => $user->name)), 406);
  }

  // Handle the case where they have provided an email address. From logintoboggan.
  try {
    $name_from_email = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:username)", array(':username' => $username))->fetchField();
  } catch (Exception $e) {
    watchdog_exception('warmshowers_site', $e);
  }
  if (!empty($name_from_email)) {
    $username = $name_from_email;
  }

  // Check if account is active.
  if (user_is_blocked($username)) {
    return services_error(t('The username %name has not been activated or is blocked.', array('%name' => $username)), 403);
  }

  // Emulate drupal native flood control: check for flood condition.
  $flood_state = array();
  if (variable_get('services_flood_control_enabled', TRUE)) {
    $flood_state = _user_resource_flood_control_precheck($username);
  }

  // Only authenticate if a flood condition was not detected.
  if (empty($flood_state['flood_control_triggered'])) {
    $uid = user_authenticate($username, $password);
  }
  else {
    $uid = FALSE;
  }

  // Emulate drupal native flood control: register flood event, and throw error
  // if a flood condition was previously detected
  if (variable_get('services_flood_control_enabled', TRUE)) {
    $flood_state['uid'] = $uid;
    _user_resource_flood_control_postcheck($flood_state);
  }

  if ($uid) {
    $user = user_load($uid);
    if ($user->uid) {
      user_login_finalize();

      $return = new stdClass();
      $return->sessid = session_id();
      $return->session_name = session_name();
      $return->token = drupal_get_token('services');

      $account = clone $user;

      services_remove_user_data($account);

      $return->user = $account;

      return $return;
    }
  }
  watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));
  return services_error(t('Wrong username or password.'), 401);
}


/**
 * Implements hook_preprocess_node() as a poor man's access control().
 * We never want the anon user (google) to access feedback nodes in any way.
 * So just return 404 in that case.
 *
 * This could have been done with content_access, but it seems like such a
 * waste to add access control.
 *
 * @param $variables
 */
function warmshowers_site_preprocess_node(&$variables) {
  if (!$GLOBALS['user']->uid && $variables['node']->type == 'trust_referral') {
    drupal_not_found();
    exit();
  }
}


/**
 * Simple page intended for icinga consumption; determine how long since
 * last mandrill incoming.
 */
function warmshowers_site_mandrill_incoming_status_page() {
  $elapsed = REQUEST_TIME - variable_get('mandrill_incoming_last_success_timestamp', 0);
  if ($elapsed > variable_get('warmshowers_site_mandrill_incoming_threshhold', 7200)) {
    $output = t("Mandrill Incoming Is Stale, last received=%date", array('%date' => format_date(variable_get('mandrill_incoming_last_success_timestamp', 0))));
  }
  else {
    $output = t("Mandrill OK,last received=%date", array('%date' => format_date(variable_get('mandrill_incoming_last_success_timestamp', 0))));
  }
  print $output;
  exit(0);
}

/**
 * Provide a list of messages which haven't been answered
 *
 * @return mixed
 */
function warmshowers_site_unanswered_messages($account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  $period = REQUEST_TIME - variable_get('wsuser_privatemsg_responsiveness_period', 31536000);

  $query = '
  SELECT DISTINCT(thread_id), pm.subject, pm.author, pi.deleted, DATE(FROM_UNIXTIME(pm.timestamp)) AS timestamp
    FROM pm_index pi, pm_message pm
    WHERE pi.recipient = :uid AND pi.thread_id = pi.mid
    AND pi.mid=pm.mid
    AND pm.timestamp > :period
    AND pi.thread_id NOT IN
      (SELECT thread_id FROM pm_index pmsi INNER JOIN pm_message pm ON pm.mid = pmsi.mid WHERE pmsi.thread_id=pi.thread_id AND pm.author = :uid)
    ORDER by pi.thread_id
  ';
  $result = db_query($query, array(
    ':uid' => $account->uid,
    ':period' => $period
  ), array('fetch' => PDO::FETCH_ASSOC));

  $data = array();

  $header = array(t('Subject'), t('From'), t('Date'));
  foreach ($result as $row) {
    if (empty($row['deleted'])) {
      $row['subject'] = l($row['subject'], 'messages/view/' . $row['thread_id']);
    }
    else {
      $row['subject'] .= ' (' . t('Message was deleted') . ')';
    }
    $sender = user_load($row['author']);
    $row['author'] = theme('username', array('account' => $sender));
    unset($row['thread_id'], $row['deleted']);
    $data[] = $row;
  }
  if (count($data)) {
    $output = t('You can still reply to these messages to improve your responsiveness rating. Sorry, you cannot reply to messages you already deleted.');
    $output .= theme('table', array('header' => $header, 'rows' => $data));
  }
  else {
    $output = t('You have no unanswered requests.');
  }
  return $output;

}
